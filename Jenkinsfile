pipeline {
  agent { 
    label 'nodejs-agent'
  }
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    timeout(time: 15, unit: 'MINUTES')
    timestamps()
  }

  environment {
    APP_NAME = "demo-app"
    BRANCH_NAME = "${env.GIT_BRANCH.replace('origin/', '')}"
    TEAM_EMAIL = 'kousssougboss@gmail.com'
  }

  stages {
    // √âtape 1: Pr√©paration et installation
    stage('Checkout & Setup') {
      steps {
        checkout scm
        sh '''
          echo "üì¶ Installation des d√©pendances..."
          npm install
          echo "‚úÖ D√©pendances install√©es"
        '''
      }
    }

    // √âtape 2: Qualit√© de code (s√©quentiel pour √©viter les conflits)
    stage('Code Quality') {
      steps {
        sh '''
          echo "üîç Ex√©cution du linting..."
          npm run lint || { echo "‚ùå Linting √©chou√©"; exit 1; }
          echo "‚úÖ Linting r√©ussi"
          
          echo "üß™ Ex√©cution des tests unitaires..."
          npm test || { echo "‚ùå Tests √©chou√©s"; exit 1; }
          echo "‚úÖ Tests r√©ussis"
        '''
      }
      post {
        failure {
          emailext body: "√âchec de la qualit√© de code dans le build ${env.BUILD_NUMBER}\n${env.BUILD_URL}",
                  subject: "FAILED: Code Quality - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                  to: "${TEAM_EMAIL}"
        }
      }
    }

    // √âtape 3: Build Docker (uniquement pour develop)
    stage('Build Docker Image') {
      when { branch 'develop' }
      steps {
        sh '''
          echo "üê≥ Construction de l'image Docker..."
          
          # V√©rifier si Docker est disponible
          if ! command -v docker &> /dev/null; then
            echo "‚ö†Ô∏è Docker non trouv√©, installation..."
            apk add --no-cache docker-cli
          fi
          
          # Build de l'image
          docker build -t ${APP_NAME}:${BRANCH_NAME}-${BUILD_NUMBER} . || {
            echo "‚ùå √âchec du build Docker"
            exit 1
          }
          
          echo "‚úÖ Image construite: ${APP_NAME}:${BRANCH_NAME}-${BUILD_NUMBER}"
          
          # Optionnel: afficher les images disponibles
          docker images | grep ${APP_NAME} || true
        '''
      }
      post {
        failure {
          emailext body: "√âchec du build Docker dans le build ${env.BUILD_NUMBER}\n${env.BUILD_URL}",
                  subject: "FAILED: Docker Build - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                  to: "${TEAM_EMAIL}"
        }
      }
    }

    // √âtape 4: D√©ploiement Staging (simul√©)
    stage('Deploy to Staging') {
      when { branch 'develop' }
      steps {
        sh '''
          echo "üöÄ D√©ploiement simul√© sur l'environnement de staging"
          echo "Image utilis√©e: ${APP_NAME}:${BRANCH_NAME}-${BUILD_NUMBER}"
          echo "Branche: ${BRANCH_NAME}"
          echo "Build: ${BUILD_NUMBER}"
          
          # Simulation du d√©ploiement
          sleep 2
          echo "‚úÖ D√©ploiement staging simul√© avec succ√®s"
        '''
      }
    }

    // √âtape 5: Validation manuelle pour la production
    stage('Production Approval') {
      when { branch 'develop' }
      steps {
        script {
          def userInput = input(
            message: 'D√©ployer cette version en production?',
            ok: 'Confirmer le d√©ploiement',
            parameters: [
              choice(choices: ['Oui', 'Non'], description: 'Confirmer le d√©ploiement', name: 'DEPLOY_CHOICE')
            ]
          )
          
          if (userInput != 'Oui') {
            error('D√©ploiement annul√© par l\'utilisateur')
          }
        }
      }
    }

    // √âtape 6: D√©ploiement Production (simul√©)
    stage('Deploy to Production') {
      when { 
        anyOf { 
          branch 'main'
          branch 'develop'  // Apr√®s approbation
        }
      }
      steps {
        sh '''
          echo "üöÄ D√âPLOIEMENT EN PRODUCTION (SIMUL√â)"
          echo "=================================="
          echo "Application: ${APP_NAME}"
          echo "Version: ${BRANCH_NAME}-${BUILD_NUMBER}"
          echo "Timestamp: $(date)"
          echo "=================================="
          
          # Simulation du d√©ploiement production
          sleep 3
          echo "‚úÖ D√âPLOIEMENT PRODUCTION TERMIN√â AVEC SUCC√àS"
        '''
      }
    }
  }

  post {
    always {
      sh '''
        echo "üßπ Nettoyage des artefacts temporaires..."
        # Nettoyage optionnel des images Docker anciennes
        docker image prune -f --filter "until=24h" || true
        echo "‚úÖ Pipeline termin√©e"
      '''
    }
    
    success {
      echo "üëâ SUCC√àS: ${env.BUILD_URL}"
      emailext body: """
        üéâ Build r√©ussi avec succ√®s!
        
        D√©tails du build:
        - Application: ${APP_NAME}
        - Branche: ${BRANCH_NAME}
        - Build #${BUILD_NUMBER}
        - URL: ${env.BUILD_URL}
        
        Consultez les logs pour plus de d√©tails.
      """,
      subject: "‚úÖ SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
      to: "${TEAM_EMAIL}"
    }
    
    failure {
      echo "‚ùå √âCHEC: Veuillez v√©rifier les logs"
      emailext body: """
        ‚ùå √âchec du pipeline!
        
        D√©tails de l'√©chec:
        - Application: ${APP_NAME}
        - Branche: ${BRANCH_NAME}
        - Build #${BUILD_NUMBER}
        - URL des logs: ${env.BUILD_URL}
        
        Veuillez consulter les logs pour identifier le probl√®me.
      """,
      subject: "‚ùå FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
      to: "${TEAM_EMAIL}"
    }
    
    unstable {
      echo "‚ö†Ô∏è Pipeline instable - des tests ont √©chou√©"
      emailext body: """
        ‚ö†Ô∏è Pipeline instable d√©tect√©
        
        Certains tests ont √©chou√© mais le build continue:
        - Application: ${APP_NAME}
        - Branche: ${BRANCH_NAME}
        - Build #${BUILD_NUMBER}
        - URL: ${env.BUILD_URL}
        
        Veuillez v√©rifier les r√©sultats des tests.
      """,
      subject: "‚ö†Ô∏è UNSTABLE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
      to: "${TEAM_EMAIL}"
    }
  }
}